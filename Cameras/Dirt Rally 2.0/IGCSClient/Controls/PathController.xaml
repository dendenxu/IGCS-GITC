<UserControl x:Class="IGCSClient.Controls.PathController"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:ui="http://schemas.modernwpf.com/2019"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:controls="clr-namespace:IGCSClient.Controls"
             xmlns:conv="clr-namespace:IGCSClient.Converters"
             xmlns:sel="clr-namespace:IGCSClient.Selectors"
             xmlns:vm="clr-namespace:IGCSClient.ViewModels"
             Style="{StaticResource ControlPageStyle}"
             mc:Ignorable="d"
             Background="{DynamicResource SystemControlBackgroundAltHighBrush}">
    <UserControl.Resources>
        <Style x:Key="DisableEnableTextBlock" TargetType="{x:Type TextBlock}">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="True">
                    <Setter Property="Opacity" Value="1" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Opacity" Value=".5" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="TransparentButtonStyle" TargetType="Button">
            <!-- 1) Override default theme styling. -->
            <Setter Property="OverridesDefaultStyle" Value="True"/>

            <!-- 2) Default property values: transparent background, no border, 
            dynamic foreground for theme, no focus visual. -->
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Margin" Value="10"/>
            <Setter Property="FontSize" Value="10" />
            <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

            <!-- 3) Define the custom ControlTemplate -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <!-- The container for your button states -->
                        <Border x:Name="Root" 
                    CornerRadius="0"
                    Background="{TemplateBinding Background}">

                            <!-- ContentPresenter displays the button's content (text or icon) -->
                            <ContentPresenter HorizontalAlignment="Center" 
                                    VerticalAlignment="Center"/>
                        </Border>

                        <!-- 4) State triggers for hover, pressed, disabled, etc. -->
                        <ControlTemplate.Triggers>

                            <!-- MouseOver: Fill background with a light gray -->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Root" Property="Background" Value="DimGray"/>
                            </Trigger>

                            <!-- Pressed: Fill background with a slightly darker gray -->
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Root" Property="Background" Value="DarkGray"/>
                            </Trigger>

                            <!-- Disabled: Keep background transparent, use Gray for foreground -->
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Root" Property="Background" Value="Transparent"/>
                                <!-- Because the Foreground is set on the button itself, 
                            we also set it in the scope of the template using TemplateBinding or a direct setter. -->
                                <Setter Property="Foreground" Value="Gray"/>
                            </Trigger>

                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Register the converter -->
        <conv:FloatArrayToStringConverter x:Key="FloatArrayToStringConverter"/>

        <!-- DataTemplate for a NodeViewModel with details (level 2 with children) -->
        <HierarchicalDataTemplate x:Key="NodeWithDetailsTemplate" DataType="{x:Type vm:NodeViewModel}" ItemsSource="{Binding Details}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Node " />
                <TextBlock Text="{Binding Index}" />
            </StackPanel>
            <!-- Level 3: NodeDetail -->
            <HierarchicalDataTemplate.ItemTemplate>
                <DataTemplate DataType="{x:Type vm:NodeDetail}">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="{Binding Key}" FontWeight="Bold"/>
                        <TextBlock Text=": "/>
                        <TextBlock Text="{Binding Value}"/>
                    </StackPanel>
                </DataTemplate>
            </HierarchicalDataTemplate.ItemTemplate>
        </HierarchicalDataTemplate>

        <!-- DataTemplate for a NodeViewModel without details (level 2 only) -->
        <DataTemplate x:Key="NodeWithoutDetailsTemplate" DataType="{x:Type vm:NodeViewModel}">
            <StackPanel Orientation="Horizontal" Margin="0">
                <TextBlock Text="Node " />
                <TextBlock Text="{Binding Index}" />
            </StackPanel>
        </DataTemplate>

        <!-- The DataTemplateSelector that toggles between the above templates -->
        <sel:NodeTemplateSelector x:Key="NodeTemplateSelector"
                                  WithDetailsTemplate="{StaticResource NodeWithDetailsTemplate}"
                                  WithoutDetailsTemplate="{StaticResource NodeWithoutDetailsTemplate}"
                                  ShowDetails="False" />
    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid Grid.RowSpan="2">
            <Grid.RowDefinitions>
                <!-- TreeView takes all available space -->
                <RowDefinition Height="*"/>
                <!-- Controls row below -->
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <!-- TreeView in Row 0 -->
            <TreeView Margin="0,0,0,0" x:Name="_pathTreeView" Grid.Row="0" ItemsSource="{Binding CameraPaths}" SelectedItemChanged="_pathTreeView_SelectedItemChanged" MouseDoubleClick="TreeView_MouseDoubleClick">
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate DataType="{x:Type vm:CameraPathViewModel}" ItemsSource="{Binding Nodes}">
                        <TextBlock Text="{Binding PathName}" FontWeight="Bold" Padding="0" Margin="0"/>
                        <HierarchicalDataTemplate.ItemTemplateSelector>
                            <StaticResource ResourceKey="NodeTemplateSelector"/>
                        </HierarchicalDataTemplate.ItemTemplateSelector>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
            <!-- Controls row in Row 1 -->
            <Grid Grid.Row="1" Margin="10">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="7*"/>
                </Grid.ColumnDefinitions>
                <!-- Node toggle control -->
                <controls:BoolInputWPF HorizontalAlignment="Right" x:Name="_toggleDetails" Label="Node Details" LabelFontSize="13" Value="False" Margin="0" Width="110"/>
                <!-- Delete Path Button -->
                <Button Grid.Column="1" HorizontalAlignment="Right" Name="_deletePath" IsEnabled="False" FontSize="10" Height="32" Padding="5,5" Click="btnDeletePath_Click" Width="auto" Margin="0">Delete Path</Button>
            </Grid>
        </Grid>
        <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Background="{DynamicResource SystemControlBackgroundListLowBrush}" Grid.RowSpan="2"/>
        <ScrollViewer Grid.Column="2" 
                      HorizontalScrollBarVisibility="Auto" 
                      VerticalScrollBarVisibility="Visible"
                      Name="Column2ScrollViewer">
            <DockPanel Grid.Column="2" Margin="10,10,10,10">
                <!--<Grid DockPanel.Dock='Top'>-->
                <Label Name="lblPathExists" Foreground="Red" Visibility="Collapsed">Check</Label>
                <ui:SimpleStackPanel VerticalAlignment="Top">
                    <Grid Margin="5,0,5,5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <!-- Label for the section -->
                        <Label Grid.Column="1" Margin="10,0,0,5" FontSize="15" Target="{Binding ElementName=txtPathName}">Path Name:</Label>
                        <Label Grid.Column="0" FontSize="15">Duration</Label>
                        <!-- TextBox for entering a path name -->
                        <TextBox Grid.Row="1" Grid.Column="1" x:Name="txtPathName" Margin="10,0,5,0" LostFocus="TxtPathName_LostFocus" GotFocus="TxtPathName_GotFocus"/>
                        <!-- Button to create a new path -->
                        <StackPanel Grid.Row="1" Grid.Column="0" Orientation="Horizontal">
                            <controls:IntInputWPF HorizontalAlignment="Stretch" x:Name="_pathDuration" Margin="0,0,2,0"/>
                            <Label VerticalAlignment="Bottom">s</Label>
                        </StackPanel>
                        <!-- Label to show an error message if the path already exists -->
                    </Grid>
                    <StackPanel Orientation="Horizontal">
                    <controls:BoolInputWPF Margin="5,0,5,0" x:Name="_toggleVisualisation" Label="Visualise Paths"></controls:BoolInputWPF>
                    <controls:BoolInputWPF Margin="5,0,5,0" x:Name="_toggleDisplayAll" Label="Display All Paths"></controls:BoolInputWPF>
                    </StackPanel>

                    <Border BorderBrush="Gray" BorderThickness="0,0,0,1" Height="1" Margin="0,5,0,0" />
                    <Grid Margin="0,10,0,0">
                        <!-- Slider is at ZIndex 0 (default) -->
                        <controls:FloatInputSliderWPF 
                            x:Name="_pathScrubber" 
                            Header="Path Position"
                            Value="0"
                            Margin="5,0,5,5"
                            FontSize="11"
                            UseCustomTemplate="True"
                            LeftLabelText="Start"
                            RightLabelText="End"
                            IsEnabled="False"/>

                        <!-- TextBlock positioned in top right with ZIndex 1 -->
                        <TextBlock 
                            Style="{StaticResource DisableEnableTextBlock}"
                            x:Name="_pathProgressText" 
                            Text="Progress: 0.0%" 
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Margin="0,0,10,0"
                            FontSize="11"
                            Foreground="{DynamicResource SystemControlForegroundBaseHighBrush}"
                            Panel.ZIndex="1"
                            IsEnabled="False"/>
                    </Grid>
                    <UniformGrid Rows="2" Margin="0,0" Height="187.5" HorizontalAlignment="Stretch">
                        <Button Name="_createPath" Style="{StaticResource TransparentButtonStyle}" IsEnabled="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Click="btnCreatePath_Click">
                            <StackPanel>
                                <ui:SymbolIcon x:Name="_addpathIcon" Symbol="NewFolder" Margin="0,0,0,8"/>
                                <TextBlock x:Name="_addPathText" Text="New Path" FontWeight="Bold" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                            </StackPanel>
                        </Button>
                        <Button Name="_playPath" Style="{StaticResource TransparentButtonStyle}" IsEnabled="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Click="btnPlayPath_Click">
                            <StackPanel>
                                <ui:SymbolIcon x:Name="_playIcon" Symbol="Play" Margin="0,0,0,8"/>
                                <TextBlock x:Name="_playIconText" Text="Play" FontWeight="Bold" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                            </StackPanel>
                        </Button>
                        <Button Name="_addNode" Style="{StaticResource TransparentButtonStyle}" IsEnabled="False"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Click="btnAddNode_Click">
                            <StackPanel>
                                <ui:SymbolIcon x:Name="_addNodeIcon" Symbol="Add" Margin="0,0,0,8"/>
                                <TextBlock x:Name="_addNodeText" Text="Add Node" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                            </StackPanel>
                        </Button>
                        <Button Name="_deleteNode" Style="{StaticResource TransparentButtonStyle}" IsEnabled="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Click="btnDeleteNode_Click" >
                            <StackPanel>
                                <ui:SymbolIcon x:Name="_deleteNodeIcon" Symbol="Remove" Margin="0,0,0,8"/>
                                <TextBlock Text="Delete Node" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                            </StackPanel>
                        </Button>
                        <Button Name="_updateNode" Style="{StaticResource TransparentButtonStyle}" IsEnabled="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Click="btnUpdateNode_Click">
                            <StackPanel>
                                <ui:SymbolIcon x:Name="_updateNodeIcon" Symbol="Upload" Margin="0,0,0,8" />
                                <TextBlock Text="Update Node" TextAlignment="Center" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                            </StackPanel>
                        </Button>
                        <Button Name="_refreshPath" Style="{StaticResource TransparentButtonStyle}" IsEnabled="False"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch"  Click="btnRefreshPath_Click">
                            <StackPanel>
                                <ui:SymbolIcon x:Name="_refreshNodeIcon" Symbol="Refresh" Margin="0,0,0,8"  />
                                <TextBlock Text="Update Path" TextAlignment="Center" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,0"/>
                            </StackPanel>
                        </Button>
                    </UniformGrid>

                    <Border BorderBrush="Gray" BorderThickness="0,0,0,1" Height="1" Margin="0,0,0,5" />

                    <StackPanel Orientation="Vertical">
                        <controls:BoolInputWPF Margin="5,0,5,0" x:Name="_constantSpeed" Label="Constant Speed"></controls:BoolInputWPF>
                        <!--<controls:BoolInputWPF Margin="5,0,5,0" x:Name="_relativePlayer" Label="Relative to Player" ValueChanged="RelativePlayer_ValueChanged" ></controls:BoolInputWPF>
                        <controls:FloatInputSliderWPF TickPlacement="BottomRight" TickValue="2" UseCustomTemplate="True" IsEnabled="False" LeftLabelText="Smoother" RightLabelText="Quicker" x:Name="_relativePathSmoothness" Margin="10,0,10,5"/>-->
                        <controls:BoolInputWPF x:Name="_waitbeforePlaying" Label="Wait 3 Seconds After Pressing Play" Margin="5,5,5,0" />
                        <controls:BoolInputWPF x:Name="_resumeonPlay" Label="Unpause Game on Path Play" Margin="5,8,5,0" />
                        <Expander x:Name="expRelativePlayer"
                                  Expanded="expRelativePlayer_Expanded"
                                  Collapsed="expRelativePlayer_Collapsed"
                                  Margin="5">
                            <!-- The Expander.Header is your BoolInputWPF control -->
                            <Expander.Header>
                                <controls:BoolInputWPF x:Name="_relativePlayer"
                                                       Label="Relative to Player"
                                                       ValueChanged="RelativePlayer_ValueChanged"/>
                            </Expander.Header>

                            <!-- The content is your FloatInputSliderWPF -->
                            <StackPanel Orientation="Vertical" Margin="10,0,0,0">
                                <controls:FloatInputSliderWPF x:Name="_relativePathSmoothness"
                                                              TickPlacement="BottomRight"
                                                              UseCustomTemplate="True"
                                                              IsEnabled="False"
                                                              LeftLabelText="Smoother"
                                                              RightLabelText="Quicker"/>
                            </StackPanel>
                        </Expander>

                        <Expander x:Name="expPathLookAt"
                                  Expanded="expPathLookAt_Expanded"
                                  Collapsed="expPathLookAt_Collapsed"
                                  Margin="5">
                            <!-- The Expander.Header is your BoolInputWPF control -->
                            <Expander.Header>
                                <controls:BoolInputWPF x:Name="_togglePathLookat"
                                                       Label="Look At Player During Path"
                                                       ValueChanged="PathLookat_ValueChanged"/>
                            </Expander.Header>

                            <!-- The content is your FloatInputSliderWPF -->
                            <StackPanel Orientation="Vertical" Margin="10,0,0,0">
                                <controls:FloatInputSliderWPF x:Name="_lookatOffsetX"
                                                              UseCustomTemplate="True"
                                                              IsEnabled="False"
                                                              Header="Offset X"/>
                                <controls:FloatInputSliderWPF x:Name="_lookatOffsetY"
                                                              UseCustomTemplate="True"
                                                              IsEnabled="False"
                                                              Header="Offset Y"/>
                                <controls:FloatInputSliderWPF x:Name="_lookatOffsetZ"
                                                              UseCustomTemplate="True"
                                                              IsEnabled="False"
                                                              Header="Offset Z"/>
                                <controls:FloatInputSliderWPF x:Name="_lookatSmoothness"
                                                              TickPlacement="BottomRight"
                                                              TickValue="10"
                                                              UseCustomTemplate="True"
                                                              IsEnabled="False"
                                                              Header="Smoothness"/>
                            </StackPanel>
                        </Expander>

                        <Expander x:Name="expAdaptiveSpeed"
                              Expanded="expAdaptiveSpeed_Expanded"
                              Collapsed="expAdaptiveSpeed_Collapsed"
                              Margin="5">
                            <!-- The Expander.Header is your BoolInputWPF control -->
                            <Expander.Header>
                                <controls:BoolInputWPF x:Name="_toggleAdaptivePathSpeed"
                               Label="Adaptive Path Speed"
                               ValueChanged="adaptivePathSpeed_ValueChanged"/>
                            </Expander.Header>

                            <!-- The content is your FloatInputSliderWPF -->
                            <StackPanel Orientation="Vertical" Margin="10,0,0,0">
                                <controls:FloatInputSliderWPF x:Name="_pathSpeedScale"
                                      TickPlacement="BottomRight"
                                      UseCustomTemplate="True"
                                      IsEnabled="False"
                                      Header="Scale"
                                      FontSize="11"/>
                                <controls:FloatInputSliderWPF x:Name="_pathSpeedSmoothness"
                                      TickPlacement="BottomRight"
                                      UseCustomTemplate="True"
                                      IsEnabled="False"
                                      Header="Smoothness" FontSize="11"/>
                                <controls:FloatInputSliderWPF x:Name="_pathSpeedMin"
                                      TickPlacement="BottomRight"
                                      UseCustomTemplate="True"
                                      IsEnabled="False"
                                      Header="Minimum Speed" FontSize="11"/>
                                <controls:FloatInputSliderWPF x:Name="_pathSpeedMax"
                                      TickPlacement="BottomRight"
                                      UseCustomTemplate="True"
                                      IsEnabled="False"
                                      Header="Maximum Speed" FontSize="11"/>
                                <controls:FloatInputSliderWPF x:Name="_pathSpeedBaseline"
                                      TickPlacement="BottomRight"
                                      TickValue="10"
                                      UseCustomTemplate="True"
                                      IsEnabled="False"
                                      Header="Baseline Speed" FontSize="11"/>
                            </StackPanel>
                        </Expander>
                    </StackPanel>

                    <!--<Grid Margin="5,0,5,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <controls:BoolInputWPF x:Name="_deltaType" Label="Fixed Delta" ValueChanged="DeltaType_ValueChanged">
                                <controls:BoolInputWPF.ToolTip>
                                    Enter a fixed value in seconds. This should be aligned to your FPS generally, otherwise the actual path duration will not align with what you specify. I.e. if you specify 0.016 (60fps) and your game is running at 120fps (0.008s) then your path will travel at double the usual speed"
                                </controls:BoolInputWPF.ToolTip>
                            </controls:BoolInputWPF>
                            <controls:FloatInputWPF Grid.Column="1" HorizontalAlignment="Stretch" x:Name="_deltaValue" Value="0.016" IsEnabled="False"/>
                        </Grid>-->

                    <Border BorderBrush="Gray" BorderThickness="0,0,0,1" Height="1" Margin="0,0,0,0" />
                        <Expander ExpandDirection="Down" Header="Camera Shake" Margin="5,10,5,5">
                            <StackPanel Grid.Column="1" Margin="0,0,0,0">
                                <controls:BoolInputWPF FontWeight="Bold" Margin="5,0,5,0" x:Name="_enableShake" Label="Camera Shake"></controls:BoolInputWPF>
                                <UniformGrid Margin="0,0,0,10" Rows="1">
                                <controls:FloatInputSliderWPF FontSize="11" UseCustomTemplate="True" Header="Amplitude" TickPlacement="TopLeft" x:Name="_shakeAmplitude" Margin="5,0,5,0"/>
                                <controls:FloatInputSliderWPF FontSize="11" UseCustomTemplate="True" Header="Frequency" TickPlacement="TopLeft" x:Name="_shakeFrequency" Margin="5,0,5,0"/>
                                </UniformGrid>
                                <controls:BoolInputWPF FontWeight="Bold" Margin="5,0,5,0" x:Name="_enablehandheld" Label="Handheld Mode"></controls:BoolInputWPF>
                                <StackPanel Orientation="Horizontal">
                                    <controls:BoolInputWPF Margin="5,0,5,0" x:Name="_handheldRotationToggle" Label="Rotation"></controls:BoolInputWPF>
                                    <controls:BoolInputWPF Margin="5,0,5,0" x:Name="_handheldPositionToggle" Label="Position"></controls:BoolInputWPF>
                                </StackPanel>
                                <controls:FloatInputSliderWPF UseCustomTemplate="True" Header="Intensity" TickPlacement="Both" x:Name="_handheldIntensity" Margin="5,0,5,10"/>
                            <UniformGrid Margin="0,0,0,0" Rows="3">
                                <controls:FloatInputSliderWPF FontSize="11" UseCustomTemplate="True" Header="Drift Intensity" TickPlacement="TopLeft" x:Name="_handheldDriftIntensity" Margin="5,0,5,0"/>
                                <controls:FloatInputSliderWPF FontSize="11" UseCustomTemplate="True" Header="Position Drift Speed" TickPlacement="TopLeft" x:Name="_handheldDriftSpeed" Margin="5,0,5,0"/>
                                <controls:FloatInputSliderWPF FontSize="11" UseCustomTemplate="True" Header="Rotation Drift Speed" TickPlacement="TopLeft" x:Name="_handheldRotationDriftSpeed" Margin="5,0,5,0"/>
                                <controls:FloatInputSliderWPF FontSize="11" UseCustomTemplate="True" Header="Jitter Intensity" TickPlacement="TopLeft" x:Name="_handheldJitterIntensity" Margin="5,0,5,0"/>
                                <controls:FloatInputSliderWPF FontSize="11" UseCustomTemplate="True" Header="Breathing Intensity" TickPlacement="TopLeft" x:Name="_handheldBreathingIntensity" Margin="5,0,5,0"/>
                                <controls:FloatInputSliderWPF FontSize="11" UseCustomTemplate="True" Header="Breathing Rate" TickPlacement="TopLeft" x:Name="_handheldBreathingRate" Margin="5,0,5,0"/>
                                </UniformGrid>
                            </StackPanel>
                        </Expander>

                        <Border BorderBrush="Gray" BorderThickness="0,0,0,1" Height="1" Margin="0,5,0,0" />

                        <Expander ExpandDirection="Down" Header="Advanced" Margin="5,10,5,5">
                            <StackPanel>
                                <!--Use a Grid to position controls side by side-->
                                <Grid Margin="0,10,0,10">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="auto"/>
                                    </Grid.RowDefinitions>
                                    <controls:ToggleGroupInputWPF x:Name="_interpolationMode" Header="Interpolation Mode" ValueChanged="interpolationMode_ValueChanged" HeaderMargin="10,0,5,2" BorderMargin="10,0,0,2"/>
                                    <controls:ToggleGroupInputWPF Grid.Column="1" x:Name="_rotationMode" Header="Rotation Mode" HeaderMargin="10,0,5,2" BorderMargin="10,0,0,2" />
                                    <controls:ToggleGroupInputWPF Grid.Row="1" x:Name="_easingPanel" Header="Easing Mode" HeaderMargin="10,5,5,2" BorderMargin="10,0,0,2"/>
                                    <controls:ToggleGroupInputWPF Grid.Row="1" Grid.Column="1" x:Name="_sampleSizePanel" Header="Sample Size" HeaderMargin="10,5,5,2" BorderMargin="10,0,0,2"/>
                                </Grid>

                                <controls:FloatInputSliderWPF UseCustomTemplate="True" Header="Easing Value" LeftLabelText="Linear" RightLabelText="Strong" x:Name="_easingValue" Margin="10,0,5,0"/>
                                <controls:DropDownInputWPF Header="Euler Order" x:Name="_eulerOrder" Visibility="Collapsed"/>
                                <HeaderedContentControl FontWeight="Bold" Margin="5,20,0,5">Time Options</HeaderedContentControl>
                                <UniformGrid Margin="5,0,0,0" Rows="1">
                                    <controls:BoolInputWPF x:Name="_deltaType" Label="Fixed Delta" ValueChanged="DeltaType_ValueChanged"/>
                                    <controls:FloatInputWPF HorizontalAlignment="Stretch" x:Name="_deltaValue" IsEnabled="False"/>
                                </UniformGrid>
                        </StackPanel>

                        </Expander>
                </ui:SimpleStackPanel>
                <!--</Grid>-->
            </DockPanel>
        </ScrollViewer>
    </Grid>
</UserControl>
